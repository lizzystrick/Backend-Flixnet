name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write 

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v3

    # Add .NET setup here if your project is a .NET project
    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Replace with your .NET version

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore ./FlixnetBackend/FlixnetBackend.csproj # Replace with the path to your solution

    # Build the project
    - name: Build
      run: dotnet build --no-restore ./FlixnetBackend/FlixnetBackend.csproj

    # Run unit tests
    - name: Test
      run: dotnet test --no-build --verbosity detailed ./Flixnet.Tests/Flixnet.Tests.csproj

    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.ghcr_username }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

 # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
      with:
          file: ./FlixnetBackend/Dockerfile
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/lizzystrick/backend-flixnet:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    - name: Set up Java for SonarQube analysis
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'adopt'  # Use 'adopt' or 'adopt@1.11' for AdoptOpenJDK 11
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Install SonarScanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip
        export PATH="$PWD/sonar-scanner-4.6.2.2472-linux/bin:$PATH"
      working-directory: /usr/local/bin

    - name: Run SonarScanner
      run: sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
      env:
       DOTNET_ROOT: /home/runner/.dotnet
       JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/11.0.21-9/x64
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

